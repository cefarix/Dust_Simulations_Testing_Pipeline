Requirements
============

* Python 3.4
* Numpy
* Scipy
* h5py
* minkfncts2d -- https://github.com/cefarix/minkfncts2d

Using the Pipeline
==================

Basic Workflow
--------------

A basic workflow looks like the following:

1. Run scripts/denormprep.py on a real-data image set file.
2. Run scripts/update-statmaker-cache.py on the real-data image set file specifying 'missing' for the statistics parameter and 16, for example, for batchsize. This is to initially populate the statistics cache and is not strictly required.
3. Run scripts/gen_GAN_images.py in the same directory as a GAN model, specifying the real-data image set as the dustcutsfile and specifying the same width and height as images in the real-data image set.
4. Run scripts/update-statmaker-cache.py again as in step 2 but now on the GAN generated image set file.
5. Open up Examples.ipynb and follow along.

Generating GAN image sets
-------------------------

Run scripts/gen_GAN_images.py in the same directory as the GAN model files to generate image sets from a GAN.
A real-data image set file needs to be specified in order to retrieve the denormalization information. (This is why scripts/denormprep.py is run on the real-data image set file.)

**Warning** Do NOT run scripts/denormprep.py on GAN generated image set files!

Generating intensity histograms from a GAN
------------------------------------------

Run scripts/gen_GAN_intensity_histograms.py to generate a set of histograms of pixel intensity of images generated by the GAN and save the histograms to a file. That file is used by the PlotMaker.plotIntensityHistogramsWithErrorBars method.
Run the script in the same directory as the GAN's model files.

Notes
-----

* Specify the same batch size when working with an image set and its associated cached statistics file.
* You can interrupt an on-going statistics calculation task. Statistics calculations are done in batches and flushed to disk after every batch, so re-starting the task will start it where it left off.


Files
=====

* *Generate_Stats.py* -- The StatMaker class.
* *Generate_Plots.py* -- The PlotMaker class.
* *Create_Image_PSD.py* -- Power spectrum calculation for square images.
* *ImageTools.py* -- Used by Create_Image_PSD.py for pixel interpolation.
* *Examples.ipynb* -- A notebook that takes you through loading image sets, calculating statistics, plotting statistics, and saving those plots, as well as a few other use cases.
* *TestPSD.ipynb* -- A notebook for testing Create_Image_PSD.py.
* *update-statmaker-cache.py* -- A script for calculating or re-calculating cached statistics on image sets.
* *scripts/denormprep.py* -- A script that should be run only on a real-data image set. Calculates and stores denormalization information in the image set file.
* *scripts/gen_GAN_images.py* -- A script which generates an image set from a GAN in the current directory.
* *scripts/gen_GAN_intensity_histograms.py* -- A script which calculates and saves pixel intensity histograms from a GAN in the current directory.
* *scripts/imagesetsplitter.py* -- A script to split an image set file into two sets at a specified image number.
* *scripts/oddevensplitter.py* -- A script to split an image set file into two sets of even-numbered images and odd-numbered images.

File Formats
============

All files are in the hdf5 format.

Image set file
--------------

* Images are stored as 2d numpy arrays labeled as '0', '1', '2', and so on.
* De-normalization data is stored under 'lognorminfo' and 'musigmainfo'.

StatMaker cache file
--------------------

Statistics are cached by batch number, starting at '0' and onwards. For the exact format see Generate_Stats.py.

